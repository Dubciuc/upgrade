# app.py
import streamlit as st
import pandas as pd
import requests
import folium
from streamlit_folium import folium_static
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import time

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="Weather Dashboard Romania-Moldova",
    page_icon="üå§Ô∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.title("üå§Ô∏è Weather Analytics Romania-Moldova")
st.markdown("---")

# –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–æ–≤
CITIES = {
    'Romania': [
        {'name': 'Suceava', 'lat': 47.6635, 'lon': 26.2535},
        {'name': 'Bucharest', 'lat': 44.4268, 'lon': 26.1025},
        {'name': 'Cluj-Napoca', 'lat': 46.7712, 'lon': 23.6236},
        {'name': 'Timisoara', 'lat': 45.7489, 'lon': 21.2087},
        {'name': 'Constanta', 'lat': 44.1598, 'lon': 28.6348},
        {'name': 'Iasi', 'lat': 47.1585, 'lon': 27.6014},
    ],
    'Moldova': [
        {'name': 'Chisinau', 'lat': 47.0105, 'lon': 28.8638},
        {'name': 'Balti', 'lat': 47.7613, 'lon': 27.9289},
        {'name': 'Cahul', 'lat': 45.9075, 'lon': 28.1984},
        {'name': 'Soroca', 'lat': 48.1581, 'lon': 28.2956},
        {'name': 'Orhei', 'lat': 47.3697, 'lon': 28.8219},
        {'name': 'Ungheni', 'lat': 47.2086, 'lon': 27.7976},
    ]
}

@st.cache_data(ttl=3600)  # –ö–µ—à –Ω–∞ 1 —á–∞—Å
def fetch_weather_data():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–≥–æ–¥—ã –∏–∑ Open-Meteo API"""
    all_data = []
    
    progress_bar = st.progress(0)
    total_cities = sum(len(cities) for cities in CITIES.values())
    processed = 0
    
    for country, cities in CITIES.items():
        for city_info in cities:
            try:
                # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π URL –¥–ª—è Open-Meteo
                url = "https://api.open-meteo.com/v1/forecast"
                params = {
                    'latitude': city_info['lat'],
                    'longitude': city_info['lon'],
                    'current_weather': 'true',  # –ò–∑–º–µ–Ω–µ–Ω–æ
                    'hourly': 'temperature_2m,relativehumidity_2m,precipitation,surface_pressure,windspeed_10m',
                    'forecast_days': 1
                }
                
                response = requests.get(url, params=params, timeout=10)
                response.raise_for_status()
                data = response.json()
                
                if 'current_weather' in data and 'hourly' in data:
                    current = data['current_weather']
                    hourly = data['hourly']
                    
                    weather_data = {
                        'country': country,
                        'city': city_info['name'],
                        'latitude': city_info['lat'],
                        'longitude': city_info['lon'],
                        'temperature': current.get('temperature'),
                        'humidity': hourly['relativehumidity_2m'][0] if hourly['relativehumidity_2m'] else None,
                        'precipitation': hourly['precipitation'][0] if hourly['precipitation'] else 0,
                        'pressure': hourly['surface_pressure'][0] if hourly['surface_pressure'] else None,
                        'wind_speed': current.get('windspeed'),
                        'timestamp': datetime.now()
                    }
                    all_data.append(weather_data)
                
                processed += 1
                progress_bar.progress(processed / total_cities)
                time.sleep(0.1)
                
            except Exception as e:
                st.warning(f"–û—à–∏–±–∫–∞ –¥–ª—è {city_info['name']}: {str(e)}")
    
    progress_bar.empty()
    return pd.DataFrame(all_data)

def create_weather_map(df):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞—Ä—Ç—ã"""
    if df.empty:
        return None
    
    # –¶–µ–Ω—Ç—Ä –∫–∞—Ä—Ç—ã –º–µ–∂–¥—É –†—É–º—ã–Ω–∏–µ–π –∏ –ú–æ–ª–¥–æ–≤–æ–π
    center_lat = df['latitude'].mean()
    center_lon = df['longitude'].mean()
    
    m = folium.Map(
        location=[center_lat, center_lon],
        zoom_start=6,
        tiles='OpenStreetMap'
    )
    
    # –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞ –¥–ª—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
    min_temp = df['temperature'].min()
    max_temp = df['temperature'].max()
    
    for _, row in df.iterrows():
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –¥–ª—è —Ü–≤–µ—Ç–∞ (0-1)
        temp_norm = (row['temperature'] - min_temp) / (max_temp - min_temp) if max_temp > min_temp else 0.5
        
        # –¶–≤–µ—Ç –æ—Ç —Å–∏–Ω–µ–≥–æ (—Ö–æ–ª–æ–¥–Ω–æ) –¥–æ –∫—Ä–∞—Å–Ω–æ–≥–æ (–∂–∞—Ä–∫–æ)
        color = f'#{int(255*temp_norm):02x}{int(100):02x}{int(255*(1-temp_norm)):02x}'
        
        popup_text = f"""
        <b>{row['city']}, {row['country']}</b><br>
        üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {row['temperature']}¬∞C<br>
        üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {row['humidity']}%<br>
        üåßÔ∏è –û—Å–∞–¥–∫–∏: {row['precipitation']} –º–º<br>
        üí® –í–µ—Ç–µ—Ä: {row['wind_speed']} –º/—Å<br>
        üìä –î–∞–≤–ª–µ–Ω–∏–µ: {row['pressure']} hPa
        """
        
        folium.CircleMarker(
            location=[row['latitude'], row['longitude']],
            radius=10,
            popup=folium.Popup(popup_text, max_width=250),
            color='white',
            weight=2,
            fillColor=color,
            fillOpacity=0.8,
            tooltip=f"{row['city']}: {row['temperature']}¬∞C"
        ).add_to(m)
    
    return m

def create_density_plots(df):
    """–°–æ–∑–¥–∞–Ω–∏–µ density plots"""
    if df.empty:
        return None, None
    
    # Density plot –≤–ª–∞–∂–Ω–æ—Å—Ç–∏
    fig_humidity = px.histogram(
        df, 
        x='humidity', 
        color='country',
        nbins=20,
        title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º',
        labels={'humidity': '–í–ª–∞–∂–Ω–æ—Å—Ç—å (%)', 'count': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Ä–æ–¥–æ–≤'},
        color_discrete_map={'Romania': '#0066cc', 'Moldova': '#ff6600'}
    )
    fig_humidity.update_layout(height=400)
    
    # Density plot —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
    fig_temp = px.histogram(
        df,
        x='temperature',
        color='country', 
        nbins=15,
        title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –ø–æ —Å—Ç—Ä–∞–Ω–∞–º',
        labels={'temperature': '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)', 'count': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Ä–æ–¥–æ–≤'},
        color_discrete_map={'Romania': '#0066cc', 'Moldova': '#ff6600'}
    )
    fig_temp.update_layout(height=400)
    
    return fig_humidity, fig_temp

def create_comparison_charts(df):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
    if df.empty:
        return None, None
    
    # –°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º
    country_stats = df.groupby('country').agg({
        'temperature': 'mean',
        'humidity': 'mean',
        'precipitation': 'mean',
        'wind_speed': 'mean'
    }).round(1)
    
    # –ë–∞—Ä–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —Å—Ä–µ–¥–Ω–µ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
    fig_bar = px.bar(
        x=country_stats.index,
        y=country_stats['temperature'],
        title='–°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º',
        labels={'x': '–°—Ç—Ä–∞–Ω–∞', 'y': '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)'},
        color=country_stats.index,
        color_discrete_map={'Romania': '#0066cc', 'Moldova': '#ff6600'}
    )
    fig_bar.update_layout(height=400, showlegend=False)
    
    # Scatter plot –≤–ª–∞–∂–Ω–æ—Å—Ç—å vs —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
    fig_scatter = px.scatter(
        df,
        x='temperature',
        y='humidity',
        color='country',
        size='wind_speed',
        hover_data=['city', 'precipitation'],
        title='–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∏ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏',
        labels={'temperature': '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)', 'humidity': '–í–ª–∞–∂–Ω–æ—Å—Ç—å (%)'},
        color_discrete_map={'Romania': '#0066cc', 'Moldova': '#ff6600'}
    )
    fig_scatter.update_layout(height=400)
    
    return fig_bar, fig_scatter

# –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
def main():
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    st.sidebar.title("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    if st.sidebar.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"):
        st.cache_data.clear()
        st.rerun()
    
    # –§–∏–ª—å—Ç—Ä—ã
    st.sidebar.subheader("üîç –§–∏–ª—å—Ç—Ä—ã")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ..."):
        df = fetch_weather_data()
    
    if df.empty:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ")
        return
    
    # –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç—Ä–∞–Ω–∞–º
    countries = st.sidebar.multiselect(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—ã:",
        options=df['country'].unique(),
        default=df['country'].unique()
    )
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    filtered_df = df[df['country'].isin(countries)]
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    st.sidebar.info(f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.now().strftime('%H:%M:%S')}")
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    st.subheader("üìä –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        avg_temp = filtered_df['temperature'].mean()
        st.metric("–°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", f"{avg_temp:.1f}¬∞C")
    
    with col2:
        avg_humidity = filtered_df['humidity'].mean()
        st.metric("–°—Ä–µ–¥–Ω—è—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å", f"{avg_humidity:.1f}%")
    
    with col3:
        total_precip = filtered_df['precipitation'].sum()
        st.metric("–û–±—â–∏–µ –æ—Å–∞–¥–∫–∏", f"{total_precip:.1f} –º–º")
    
    with col4:
        avg_wind = filtered_df['wind_speed'].mean()
        st.metric("–°—Ä–µ–¥–Ω–∏–π –≤–µ—Ç–µ—Ä", f"{avg_wind:.1f} –º/—Å")
    
    st.markdown("---")
    
    # –ì–ª–∞–≤–Ω–∞—è —Å–µ–∫—Ü–∏—è —Å –∫–∞—Ä—Ç–æ–π
    st.subheader("üó∫Ô∏è –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞ –ø–æ–≥–æ–¥—ã")
    
    weather_map = create_weather_map(filtered_df)
    if weather_map:
        folium_static(weather_map, width=1200, height=600)
    
    st.markdown("---")
    
    # Density plots
    st.subheader("üìà –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è")
    
    fig_humidity, fig_temp = create_density_plots(filtered_df)
    
    col1, col2 = st.columns(2)
    
    with col1:
        if fig_humidity:
            st.plotly_chart(fig_humidity, use_container_width=True)
    
    with col2:
        if fig_temp:
            st.plotly_chart(fig_temp, use_container_width=True)
    
    st.markdown("---")
    
    # –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏
    st.subheader("üîç –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
    
    fig_bar, fig_scatter = create_comparison_charts(filtered_df)
    
    col1, col2 = st.columns(2)
    
    with col1:
        if fig_bar:
            st.plotly_chart(fig_bar, use_container_width=True)
    
    with col2:
        if fig_scatter:
            st.plotly_chart(fig_scatter, use_container_width=True)
    
    st.markdown("---")
    
    # –¢–∞–±–ª–∏—Ü–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
    st.subheader("üìã –î–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    display_df = filtered_df.copy()
    display_df['temperature'] = display_df['temperature'].apply(lambda x: f"{x:.1f}¬∞C")
    display_df['humidity'] = display_df['humidity'].apply(lambda x: f"{x:.1f}%")
    display_df['precipitation'] = display_df['precipitation'].apply(lambda x: f"{x:.1f} –º–º")
    display_df['wind_speed'] = display_df['wind_speed'].apply(lambda x: f"{x:.1f} –º/—Å")
    display_df['pressure'] = display_df['pressure'].apply(lambda x: f"{x:.1f} hPa")
    
    st.dataframe(
        display_df[['country', 'city', 'temperature', 'humidity', 'precipitation', 'wind_speed', 'pressure']],
        use_container_width=True,
        column_config={
            'country': '–°—Ç—Ä–∞–Ω–∞',
            'city': '–ì–æ—Ä–æ–¥', 
            'temperature': '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞',
            'humidity': '–í–ª–∞–∂–Ω–æ—Å—Ç—å',
            'precipitation': '–û—Å–∞–¥–∫–∏',
            'wind_speed': '–í–µ—Ç–µ—Ä',
            'pressure': '–î–∞–≤–ª–µ–Ω–∏–µ'
        }
    )

if __name__ == "__main__":
    main()