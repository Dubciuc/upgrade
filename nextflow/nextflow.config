// nextflow.config

params {
    // Input/Output
    input_dir = "test_data/ont_data"
    outdir = "results"
    
    // Resources
    threads = 30
    memory = '60.GB'
    
    // Filtlong parameters
    filtlong_min_length = 1000
    filtlong_keep_percent = 90
    filtlong_min_quality = 10
    
    // Flye parameters
    flye_mode = '--nano-raw'  // Options: --nano-raw, --nano-hq, --nano-corr, --pacbio-raw, --pacbio-hifi, --pacbio-corr
    flye_genome_size = '5m'   // Estimated genome size (e.g., 5m for 5MB, 2.6g for 2.6GB)
    flye_iterations = 1       // Number of polishing iterations
    flye_meta = false         // Enable metagenome mode
    
    // Help parameter
    help = false
}

// Process configuration
process {
    // Default settings
    cpus = { params.threads }
    memory = { params.memory }
    time = '50h'
    
    // NanoPlot process
    withName: 'NANOPLOT' {
        cpus = 30
        memory = '80.GB'
        time = '10h'
        publishDir = [
            path: "${params.outdir}/01_QC/nanoplot",
            mode: 'copy'
        ]
    }
    
    // Filtlong process
    withName: 'FILTLONG' {
        cpus = 30
        memory = '80.GB'
        time = '10h'
        publishDir = [
            path: "${params.outdir}/02_filtered",
            mode: 'copy'
        ]
    }
    
    // Flye assembly process
    withName: 'FLYE' {
        cpus = 30
        memory = '120.GB'
        time = '24h'
        publishDir = [
            path: "${params.outdir}/03_assembly",
            mode: 'copy'
        ]
    }
}

// Execution profiles
profiles {
    docker {
        docker.enabled = true
        docker.runOptions = '-u $(id -u):$(id -g)'
        
        process {
            withName: 'NANOPLOT' {
                container = 'quay.io/biocontainers/nanoplot:1.42.0--pyhdfd78af_0'
            }
            withName: 'FILTLONG' {
                container = 'staphb/filtlong:0.2.1'
            }
            withName: 'FLYE' {
                container = 'staphb/flye:2.9.2'
            }
        }
    }
}

// Reporting
timeline {
    enabled = true
    file = "${params.outdir}/timeline.html"
    overwrite = true
}

report {
    enabled = true
    file = "${params.outdir}/report.html"
    overwrite = true
}

trace {
    enabled = true
    file = "${params.outdir}/trace.txt"
    overwrite = true
}